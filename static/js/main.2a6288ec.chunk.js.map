{"version":3,"sources":["ListElement/ListElement.js","App/App.js","registerServiceWorker.js","index.js"],"names":["ListElement","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","edit","content","finished","setState","e","preventDefault","handleEdit","target","firstChild","value","inputContent","react_default","a","createElement","className","draggable","onDragStart","id","onClick","handleComplete","name","bind","handleDelete","handleUncomplete","onSubmit","handleSubmit","type","placeholder","autoFocus","Component","App","wipItems","completeItems","handlePageRefresh","assertThisInitialized","handleClear","localStorage","getItem","JSON","parse","window","addEventListener","removeEventListener","setItem","stringify","oldContent","newContent","editArr","slice","i","findIndex","element","newItemsArray","length","push","index","newArr","filter","li","newWipArr","newCompleteArr","concat","dataTransfer","setData","getData","_this2","onDragOver","handleDragOver","onDrop","handleDropToWip","map","src_ListElement_ListElement","key","handleWipDelete","handleCompleteTask","handleDragStart","handleDropToComplete","handleCompleteDelete","handleUncompleteTask","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_App","document","getElementById","URL","process","origin","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2a6288ec.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ListElement extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            edit: false,\n            content: this.props.content,\n            finished: this.props.finished\n        }\n    }\n\n    /* Handles user clicking the edit button. Causes re-render to display\n       a text input in place of the final task contents. */\n    handleEdit() {\n        if (this.state.edit === false) {\n            this.setState({edit: true});\n        } else {\n            this.setState({edit: true});\n        }\n    }\n\n    /* Handles submission of text input on a ListElement with this.state.edit set\n       to true. */\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.handleEdit(this.props.content, e.target.firstChild.value);\n        const inputContent = e.target.firstChild.value;\n        this.setState({edit: false, content: inputContent});\n    }\n\n    render() {\n        if (this.state.edit === false) {\n            if (this.state.finished === false) {\n                return (\n                    <li className=\"saved-task\" draggable onDragStart={this.props.onDragStart} >\n                        {this.state.content}\n                        <div className=\"buttons\">\n                            <span><button className=\"buttons\" id=\"finish\" onClick={this.props.handleComplete}><ion-icon name=\"checkmark\"></ion-icon></button></span>\n                            <span><button className=\"buttons\" id=\"edit\" onClick={this.handleEdit.bind(this)}><ion-icon name=\"build\"></ion-icon></button></span>\n                            <span><button className=\"buttons\" id=\"delete\" onClick={this.props.handleDelete}><ion-icon name=\"trash\"></ion-icon></button></span>\n                        </div>\n                    </li>\n                )\n            } else {\n                return (\n                    <li className=\"saved-task finished\" draggable onDragStart={this.props.onDragStart}>\n                        {this.state.content}\n                        <div className=\"buttons\">\n                            <span><button className=\"buttons\" id=\"finish\" onClick={this.props.handleUncomplete}><ion-icon name=\"undo\"></ion-icon></button></span>\n                            <span><button className=\"buttons\" id=\"delete\" onClick={this.props.handleDelete}><ion-icon name=\"trash\"></ion-icon></button></span>\n                        </div>\n                    </li>\n                );\n            }\n        } else {\n            return (\n                <li className=\"edit-task\">\n                    <form onSubmit={this.handleSubmit.bind(this)}>\n                        <input type=\"text\" placeholder={this.state.content} autoFocus/>\n                    </form>\n                </li>\n            );\n        }\n    }\n}\n\nexport default ListElement;","import React, { Component } from 'react';\nimport './App.css';\nimport ListElement from '../ListElement/ListElement';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wipItems: [],\n      completeItems: []\n    }\n\n    this.handlePageRefresh = this.handlePageRefresh.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n  }\n\n  componentWillMount() {\n    if(localStorage.getItem('state')) {\n      this.setState({\n        wipItems: JSON.parse(localStorage.getItem('state')).wipItems,\n        completeItems: JSON.parse(localStorage.getItem('state')).completeItems\n      });\n    } else {\n      this.setState({\n        wipItems: [],\n        completeItems: []\n      });\n    }\n    \n\n    window.addEventListener('beforeunload', this.handlePageRefresh);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.handlePageRefresh);\n  }\n\n  handlePageRefresh() {\n    localStorage.setItem('state', JSON.stringify({\n      wipItems: this.state.wipItems,\n      completeItems: this.state.completeItems\n    }));\n  }\n\n  handleEdit(oldContent, newContent) {\n    const editArr = this.state.wipItems.slice();\n    const i = editArr.findIndex(element => element.content === oldContent);\n    editArr[i] = { content: newContent };\n\n    this.setState({\n      wipItems: editArr\n    });\n  }\n\n  /*---- WIP LIST METHODS ----*/\n\n  /* Handles submission of text input and adds a ListElement component to the WIP list\n     in this.state  */\n  handleSubmit(e) {\n    e.preventDefault();\n    const inputContent = e.target.firstChild.value;\n    const newItemsArray = this.state.wipItems.slice(0, this.state.wipItems.length);\n    newItemsArray.push({content: inputContent});\n    localStorage.setItem('state', JSON.stringify({\n      wipItems: newItemsArray,\n      completeItems: this.state.completeItems\n    }))\n    this.setState({wipItems: newItemsArray});\n    \n    e.target.firstChild.value = '';\n  }\n\n  /* Handles user clicking the delete button within the WIP list. Removes the task from all lists. */\n  handleWipDelete(e, index) {\n    const newArr = this.state.wipItems.filter((li, i) => i !== index);\n    localStorage.setItem('state', JSON.stringify({\n      wipItems: newArr,\n      completeItems: this.state.completeItems\n    }));\n    this.setState({wipItems: newArr});\n  }\n\n  /* Handles user clicking the complete task button within the WIP list. Transfers\n     ListElement component to the Complete list. */\n  handleCompleteTask(e, content) {\n    const newWipArr = this.state.wipItems.filter(li => li.content !== content);\n    const newCompleteArr = this.state.completeItems.concat([{content: content}]);\n    localStorage.setItem('state', JSON.stringify({\n      wipItems: newWipArr,\n      completeItems: newCompleteArr\n    }));\n\n    this.setState({wipItems: newWipArr, completeItems: newCompleteArr});\n  }\n\n  /*---- COMPLETED LIST METHODS ----*/\n\n  /* Handles user clicking the uncomplete task button within the Completed list.\n     Transfers ListElement component to the WIP list. */\n  handleUncompleteTask(e, content) {\n    const newCompleteArr = this.state.completeItems.filter(li => li.content !== content);\n    const newWipArr = this.state.wipItems.concat([{content: content}]);\n\n    localStorage.setItem('state', JSON.stringify({\n      wipItems: newWipArr,\n      completeItems: newCompleteArr\n    }));\n\n    this.setState({wipItems: newWipArr, completeItems: newCompleteArr});\n  }\n\n  /* Handles user clicking on the delete button within the Completed list.\n     Removes the task from all lists. */\n  handleCompleteDelete(e, index) {\n    const newArr = this.state.completeItems.filter((li, i) => i !== index);\n    localStorage.setItem('state', JSON.stringify({\n      wipItems: this.state.wipItems,\n      completeItems: newArr\n    }));\n    this.setState({completeItems: newArr});\n  }\n\n  /*---- DRAG AND DROP METHODS ----*/\n\n  /* Captures content of the target of the Drag action so that it can be\n     used in the drop methods */\n  handleDragStart(e, content) {\n    e.dataTransfer.setData(\"content\", content);\n  }\n\n  /* Nullifies default behvior of dragOver event */\n  handleDragOver(e) {\n    e.preventDefault();\n  }\n\n  /* Filters out duplicate drops then transfers ListElement component from\n     WIP list to Complete list */\n  handleDropToComplete(e) {\n    for (let i = 0; i < this.state.completeItems.length; i++) {\n      if (e.dataTransfer.getData(\"content\") === this.state.completeItems[i].content) {\n        return -1;\n      }\n    }\n    const content = e.dataTransfer.getData(\"content\");\n    const newWipArr = this.state.wipItems.filter(li => li.content !== content);\n    const newCompleteArr = this.state.completeItems.concat([{content: content}])\n    localStorage.setItem('state', JSON.stringify({\n      wipItems: newWipArr,\n      completeItems: newCompleteArr\n    }));\n    this.setState({wipItems: newWipArr, completeItems: newCompleteArr});\n  }\n\n  /* Filters out duplicate drops then transfers ListElement component from\n     Complete list to WIP list */\n  handleDropToWip(e) {\n    for (let i = 0; i < this.state.wipItems.length; i++) {\n      if (e.dataTransfer.getData(\"content\") === this.state.wipItems[i].content) {\n        return -1;\n      }\n    }\n    const content = e.dataTransfer.getData(\"content\");\n    const newCompleteArr = this.state.completeItems.filter(li => li.content !== content);\n    const newWipArr = this.state.wipItems.concat([{content: content}]);\n\n    localStorage.setItem('state', JSON.stringify({\n      wipItems: newWipArr,\n      completeItems: newCompleteArr\n    }));\n    this.setState({wipItems: newWipArr, completeItems: newCompleteArr})\n  }\n  \n  handleClear() {\n    this.setState({\n      wipItems: [],\n      completeItems: []\n    });\n  }\n\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>To Do</h1>\n        <div className=\"lists\">\n          <ul className=\"wip\" onDragOver={e => this.handleDragOver(e)} onDrop={e => this.handleDropToWip(e)}>\n            <h2>Work In Progress</h2>\n            {this.state.wipItems.map((li, index) => \n              <ListElement \n              key={li.content} \n              content={li.content} \n              finished={false}\n              handleDelete={(e) => this.handleWipDelete(e, index)} \n              handleComplete={(e) => this.handleCompleteTask(e, li.content)}\n              onDragStart={e => this.handleDragStart(e, li.content)} \n              handleEdit={ this.handleEdit }\n              />\n            )}\n            <li className=\"edit-task\">\n              <form onSubmit={this.handleSubmit.bind(this)}>\n                <input type=\"text\" placeholder=\"add new task..\" />\n              </form>\n            </li>\n          </ul>\n          <ul className=\"completed\" onDragOver={e => this.handleDragOver(e)} onDrop={(e) => this.handleDropToComplete(e)}>\n              <h2>Completed Tasks</h2>\n              {this.state.completeItems.map((li, index) => \n              <ListElement \n              key={li.content} \n              content={li.content} \n              finished={true} \n              handleDelete={(e) => this.handleCompleteDelete(e, index)} \n              handleUncomplete={(e) => this.handleUncompleteTask(e, li.content)}\n              onDragStart={e => this.handleDragStart(e, li.content)}\n              \n              />\n              )}\n          </ul>\n        </div>\n        <button className=\"clear-button\" onClick={ this.handleClear }>Clear All ToDos</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}